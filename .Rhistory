swirl()
library(swirl)
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- (num_vect < 1)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Johnny")
paste(my_name, collapse = " ")
my_name()
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"), sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
library(swirl)
rm(list=ls())
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags
)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply()
sapply(cls_vect, function)
cls_vect <- sapply(flag, class)
cls_vect <- sapply(flags , class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags,
| class, character(1))
vapply(flags,class, character(1))
?taply
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
mean(iris[iris$Species == "virginica",]$Sepal.Length)
library(datasets)
data(mtcars)
?mtcars
debug(ls)
debug(ls)
# Function to create an cache matrix to store inverse
makeCacheMatrix <- function(x = matrix()) {
# Initially the inverse is a NULL value
inv <<- NULL
# Set the cached matrix to the function argument x
set <- function(y) {
x <<- y
# Change value of matrix inverse in case the matrix was altered
inv <<- NULL
}
# Gets the inverse value
get <- function() x
# Calculates matrix inverse using the solve function
setinverse <- function(inverse) inv <<- inverse
# Get the matrix inverse
getinverse <- function() inv
# Passes  function values to makeCacheMatrix
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
# Function to check if caches inverse exists and calculate if none found
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
# Check if there is a cache file; return and stop recalculation
if(!is.null(inv)) {
message("Getting cached data - Inverse found")
return(inv)
}
# If no cache, recalculate matrix inverse (pass back to Setinverse)
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
# Display inverse
inv
}
m <- matrix(rnorm(16),4,4)
m1 <- makeCacheMatrix(m)
cacheSolve(m1)
cacheSolve(m1)
## Assignment: Caching the Inverse of a Matrix
## For this assignment I will solve for the inverse of a matrix.
## The assignment has two functions.  The first function will store a matrix,
## and the second function will compute the inverse of the matrix.
## In the first function "makeCacheMatrix" a matrix is created by setting the values
## of the matrix, get the values of the matrix, set the values of the inverse,
## and get the values of the matrix.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse = function(inverse) inv <<- inverse
getinverse = function() inv
list(set = set, get = get, setinverse = setinverse,
getinverse = getinverse)
}
## The next function solves for the inverse of the matrix created
## above.  It checks if the inverse was already solved, and if so
## it gets the inverse from the cache and skips calculations.  If
## the inverse was not solved, it will calculate the inverse of
## the matrix, set the values of the inverse, and return the
## results.
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting the cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
m <- matrix(rnorm(16),4,4)
m1 <- makeCacheMatrix(m)
cacheSolve(m1)
## Assignment: Caching the Inverse of a Matrix
## Following are a pair of functions that can cache inverse of a matrix
## This function creates a 'matrix' object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
## Create a variable to store the inverse
cache <- NULL
## Create a function to store the matrix in variable x
set <- function(y){
x <<- y
cache <<- NULL
}
## Create a function to retrieve matrix stored in x
get<-function() x
## Create a function to set inverse of the matrix
setInverse<- function(newValue){
cache <<- newValue
}
## Create a function to retrieve inverse of the matrix
getInverse <- function() cache
## Create list of the above functions
list(set=set,
get=get,
setInverse=setInverse,
getInverse=getInverse)
}
## This function checks whether the cached value of inverse of the matrix exists
## If the value exists, it returns the cached inverse else it computes the inverse of cached value of the matrix
cacheSolve <- function(x, ...) {
## Retrive inverse of a matrix
cache <- x$getInverse()
## Retrieve inverse from the cache and display message if the value is not null
if(!is.null(cache)){
message("cached inverse value exists")
return(cache)
}
## Get the matrix created by getCacheMatrix and store the value in "data"
data <- x$get()
## Calculate the inverse of the matrix
cache <- solve(data,...)
## Store inverse in the cache
x$setInverse(cache)
## Return inverse
cache
}
m <- matrix(rnorm(16),4,4)
m1 <- makeCacheMatrix(m)
cacheSolve(m1)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
swirl()
library(swirl)
library(swirl)
swirl()
ls()
class(plants)
dim (plants)
nrow plants
nrow (plants)
ncol(plants)
object.size((plants))
object.size((plants)
)
object.size(plants)
names(plants)
head()
head(plants)
head(plants,10)
tail()
tail(plants)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
sample()
?sample()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:10, 4)
sample(1:10, 10)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <-  prob = c(0.3, 0.7)
prob = c(0.3, 0.7)
flips <- sample(c(0,1), 100,
| replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100,replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
rbinom(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- sample(c(0,1), 100,replace = TRUE, prob = c(0.3, 0.7))
flips2 <-rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
info()
flips2 = rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
rnorm(10)
?rnorm
rnorm(10)
rnorm(100)
r
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5,10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
0
exit
quil
quit()
library("xlsx")
Sys.setenv()
options(java.home="C:\\Program Files (x86)\\Java\\jre1.8.0_151\\bin")
library(rJava)
Sys.setenv(JAVA_HOME="C:\\Program Files (x86)\\Java\\jre1.8.0_151\\bin")
Sys.getenv("JAVA_HOME")
library(rJava)
install.packages("rJava")
library(rJava)
library(swirl)
rm(list=ls())
library(swirl)
swirl()
?reafd.csv
?read.csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm (mydf)
rm ("mydf"")
rm ("mydf)
rm ("mydf")
cran
?select
cran <- tbl_df(mydf)
select(cran, ip_id, package, country)
select(cran, ip_id, package, country) 5:20
5:20
s select(cran, ip_id, package, country)
select(cran, ip_id, package, country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, country, desc(r_version), ip_id)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
script_results_identical('pack_sum'); multi_expr_creates_var('pack_sum')
pack_sum <- summarize(by_package,
count = ,
unique = ,
countries = ,
avg_bytes = )
script_results_identical('pack_sum'); multi_expr_creates_var('pack_sum')
script_results_identical('pack_sum'); multi_expr_creates_var('pack_sum')
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
script_results_identical('pack_sum'); multi_expr_creates_var('pack_sum')
source('C:/Users/Admin/AppData/Local/Temp/RtmpMZvEAu/summarize1.R')
pack_sum
summarize(by_package, mean(size))
by_package <- group_by(cran, package)
by_package
script_results_identical('pack_sum'); multi_expr_creates_var('pack_sum')
pack_sum
script_results_identical('pack_sum'
)
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
?n
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View()
View(result3)
submit
submit()
submit()
script_vals_identical()
submit()
submt(0)
submt()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate()
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
library(readr)
parse_number("class5")
submit()
script_vals_identical()
submit()
students4
submit()
submit()
submit()
prints_var('passed')
passed
failed
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
packageVersion('dplyr')
?bind_rows
bind_rows(passed, failed)
sat
submit()
submit()
source('D:/OneDrive/Public/Data Science/Course 4/my_tool_analysis.R')
setwd("D:/OneDrive/Public/Data Science/Course 4")
source('D:/OneDrive/Public/Data Science/Course 4/my_tool_analysis.R')
rmarkdown::render("my_tool_analysis.R",output_file = 'codebook.md')
source('D:/OneDrive/Public/Data Science/Course 4/my_tool_analysis.R')
source('D:/OneDrive/Public/Data Science/Course 4/my_tool_analysis.R')
